#!/bin/bash

set -o errexit
set -o pipefail
set -o xtrace

############################
# Some useful functions
############################

get_deb_snapshot() {{
    # Remove quotes from input argument(s)
    local INPUT
    INPUT=( $(tr -d \" <<< "${{@}}") )
    # Ubuntu repos may have format "[deb] URL DISTRO COMPONENT1 [COMPONENTN][,PRIORITY]"
    local deb_prefix=''
    if [ "${{INPUT[0]}}" = "deb" ]; then
        deb_prefix='deb '
        unset INPUT[0]
    fi
    # Assign values to variables.
    # The last variable - 'components' - will also contain priority if any, but
    # it does not matter here, it will be returned as is
    read -r repo_url dist_name components <<< "${{INPUT[@]}}"
    # Remove trailing slash
    repo_url=${{repo_url%/}}
    # Cut version
    repo_version=${{repo_url##*/}}
    repo_url=${{repo_url%/*}}
    # Get snapshot
    local snapshot=$(curl -fLsS "${{repo_url}}/snapshots/${{repo_version}}-latest.target.txt" | sed '1p; d')
    echo "${{deb_prefix}}${{repo_url}}/snapshots/${{snapshot}} ${{dist_name}} ${{components}}"
}}

get_rpm_snapshot() {{
    # Remove quotes from input argument
    local INPUT
    INPUT=$(tr -d \" <<< "${{1}}")
    # Centos repos may have format "[NAME,]URL[,PRIORITY]"
    read -r repo_name repo_url priority <<< "${{INPUT//,/ }}"
    if [ -z "${{repo_url}}" ]; then
        # Repo does not have extra parameters
        repo_url=${{repo_name}}
        unset repo_name
    elif [ -z "${{priority}}" ]; then
        # Two parameters... Do we have repo name or priority?
        if [[ "${{repo_url}}" =~ ^[0-9]+$ ]]; then
            # repo_url contain only numbers - it is priority
            priority=${{repo_url}}
            repo_url=${{repo_name}}
            unset repo_name
        fi
    fi
    # Remove trailing slash
    repo_url="${{repo_url%/}}"
    # Remove architecture
    repo_url="${{repo_url%/*}}"
    # Cut component
    repo_component="${{repo_url##*/}}"
    repo_url=${{repo_url%/*}}
    # Get snapshot
    local snapshot="$(curl -fLsS "${{repo_url}}/snapshots/${{repo_component}}-latest.target.txt" | sed '1p; d')"
    echo "${{repo_name:+${{repo_name}},}}${{repo_url}}/snapshots/${{snapshot}}/x86_64${{priority:+,${{priority}}}}"
}}

join() {{
    local IFS="${{1}}"
    shift
    echo "${{*}}"
}}

############################
# Project parameters
############################

export PROJECT_NAME={project-name}
export PROJECT_VERSION={project-version}

############################
# Global parameters
############################

export PKG_TYPE="{pkg_type}"
export DIST="${{DIST:-{distro}}}"
export DISTRO_PATH="${{DIST}}/"
export SPEC_PREFIX_PATH="{spec_path_prefix}"
export REPO_REQUEST_PATH_PREFIX="{cr-path-prefix}"

# Publish host parameters
export REMOTE_REPO_HOST={repo-host}

SRC_PROJECT_PATH="${{GERRIT_PROJECT%/*}}"
SRC_PROJECT_PATH="${{SRC_PROJECT_PATH%-build}}"
SPEC_PROJECT_PATH=openstack-build
export SRC_PROJECT_PATH SPEC_PROJECT_PATH

# Parameters for package specs
export SPEC_PROJECT_SUFFIX={spec-project-suffix}

# Set parameters specific to project(s)
case ${{ZUUL_PROJECT}} in
    openstack/fuel-*|openstack/network-checker|openstack/python-fuelclient|openstack/packetary|openstack/shotgun|openstack/timmy|openstack/tuning-box )
        IS_FUEL=true
        IS_OPENSTACK=false
        unset SPEC_PROJECT
        ;;
esac

DEB_DIST_NAME={deb-dist-name}
DEB_REPO_PATH={deb-repo-path}
RPM_REPO_PATH={rpm-repo-path}/os/x86_64/
export DEB_DIST_NAME DEB_REPO_PATH RPM_REPO_PATH

export IS_UPDATES={is_updates}

# DEB-specific parameters
if [ "${{GERRIT_CHANGE_STATUS}}" = "MERGED" ]; then
    export ORIGIN={deb-origin-release}
else
    export ORIGIN={deb-origin-test}
fi
export DEB_PROPOSED_DIST_NAME={deb-dist-name}-proposed
export DEB_UPDATES_DIST_NAME={deb-dist-name}-updates
export DEB_SECURITY_DIST_NAME={deb-dist-name}-security
export DEB_HOLDBACK_DIST_NAME={deb-dist-name}-holdback
export DEB_HOTFIX_DIST_NAME={deb-dist-name}-hotfix

# RPM-specific parameters
export RPM_OS_REPO_PATH={rpm-repo-path}/os
export RPM_PROPOSED_REPO_PATH={rpm-repo-path}/proposed
export RPM_UPDATES_REPO_PATH={rpm-repo-path}/updates
export RPM_SECURITY_REPO_PATH={rpm-repo-path}/security
export RPM_HOLDBACK_REPO_PATH={rpm-repo-path}/holdback

# Per-CR repository pathes
export DEB_REQUEST_REPO_PATH={deb-repo-path}
export RPM_REQUEST_OS_REPO_PATH={rpm-repo-path}/os
export RPM_REQUEST_HOTFIX_REPO_PATH={rpm-repo-path}/hotfix
export RPM_REQUEST_SECURITY_REPO_PATH={rpm-repo-path}/security
export RPM_REQUEST_PROPOSED_REPO_PATH={rpm-repo-path}/proposed

if [ -f mirror.setenvfile ]; then
    source mirror.setenvfile
else
    MIRROR_HOST="mirror.fuel-infra.org"
fi

# Extra repos containing build dependecies
case ${{PKG_TYPE}} in
    deb)
        EXTRAREPO="$(get_deb_snapshot http://${{MIRROR_HOST}}/{mos-deb-repo-path} {mos-deb-dist-name} main restricted)"
        EXTRAREPO="${{EXTRAREPO}}|$(get_deb_snapshot http://${{MIRROR_HOST}}/{mos-deb-repo-path} {mos-deb-dist-name}-updates main restricted)"
        EXTRAREPO="${{EXTRAREPO}}|$(get_deb_snapshot http://${{MIRROR_HOST}}/{mos-deb-repo-path} {mos-deb-dist-name}-proposed main restricted)"
        ;;
    rpm)
        EXTRAREPO="mos-base,$(get_rpm_snapshot http://${{MIRROR_HOST}}/{mos-rpm-repo-path}/os/x86_64)"
        EXTRAREPO="${{EXTRAREPO}}|mos-updates,$(get_rpm_snapshot http://${{MIRROR_HOST}}/{mos-rpm-repo-path}/updates/x86_64)"
        EXTRAREPO="${{EXTRAREPO}}|mos-proposed,$(get_rpm_snapshot http://${{MIRROR_HOST}}/{mos-rpm-repo-path}/proposed/x86_64)"
        ;;
esac
export EXTRAREPO

############################
# Build package
############################

# Don't use perestroika to get Fuel sources
sed -ri '/fetch_upstream/ d' build-fuel-{pkg_type}.sh

# Save time of build start
BUILD_START_AT=$(date -u +%s)

# ... and build a package
bash -x build-${{IS_FUEL:+fuel-}}{pkg_type}.sh

# Print build job duration
BUILD_FINISH_AT=$(date -u +%s)
BUILD_DURATION=$(( ${{BUILD_FINISH_AT}} - ${{BUILD_START_AT}} ))
H=$(( ${{BUILD_DURATION}}/3600 ))    # Hours
M=$(( ${{BUILD_DURATION}}%3600/60 )) # Minutes
S=$(( ${{BUILD_DURATION}}%60 ))      # Seconds

echo '##############################'
printf "Package building took %02d:%02d:%02d\n" ${{H}} ${{M}} ${{S}}
echo '##############################'

rm -rf {repo-base-path}/${{REQUEST_NUM:-CR-${{GERRIT_CHANGE_NUMBER}}}}

# Extra parameters for publisher
cat >> buildresult.params <<EOF

# Added for publisher
ORIGIN=${{ORIGIN}}
IS_UPDATES={is_updates}
REPO_REQUEST_PATH_PREFIX=${{REPO_REQUEST_PATH_PREFIX}}
REPO_BASE_PATH={repo-base-path}
DEB_DIST_NAME=${{DEB_DIST_NAME}}
DEB_REPO_PATH=${{DEB_REPO_PATH}}
DEB_PROPOSED_DIST_NAME=${{DEB_PROPOSED_DIST_NAME}}
DEB_UPDATES_DIST_NAME=${{DEB_UPDATES_DIST_NAME}}
DEB_SECURITY_DIST_NAME=${{DEB_SECURITY_DIST_NAME}}
DEB_HOLDBACK_DIST_NAME=${{DEB_HOLDBACK_DIST_NAME}}
DEB_HOTFIX_DIST_NAME=${{DEB_HOTFIX_DIST_NAME}}
RPM_REPO_PATH=${{RPM_REPO_PATH}}
RPM_OS_REPO_PATH=${{RPM_OS_REPO_PATH}}
RPM_PROPOSED_REPO_PATH=${{RPM_PROPOSED_REPO_PATH}}
RPM_UPDATES_REPO_PATH=${{RPM_UPDATES_REPO_PATH}}
RPM_SECURITY_REPO_PATH=${{RPM_SECURITY_REPO_PATH}}
RPM_HOLDBACK_REPO_PATH=${{RPM_HOLDBACK_REPO_PATH}}
REMOTE_REPO_HOST=${{REMOTE_REPO_HOST}}
EOF

# Package may not have custom tests. This will create empty file but will not
# affect test parameters if any
touch tests.envfile

test "${{UNSET_LP_BUG:-false}}" == "true" && sed -ri '/^LP_BUG=/ d' buildresult.params || :
